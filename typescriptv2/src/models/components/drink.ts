/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Name = {
    Beer: "Beer",
    Coffee: "Coffee",
    Wine: "Wine",
} as const;
export type Name = ClosedEnum<typeof Name>;

export type Drink = {
    id: string;
    name: Name;
    price: number;
};

/** @internal */
export const Name$inboundSchema: z.ZodNativeEnum<typeof Name> = z.nativeEnum(Name);

/** @internal */
export const Name$outboundSchema: z.ZodNativeEnum<typeof Name> = Name$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Name$ {
    /** @deprecated use `Name$inboundSchema` instead. */
    export const inboundSchema = Name$inboundSchema;
    /** @deprecated use `Name$outboundSchema` instead. */
    export const outboundSchema = Name$outboundSchema;
}

/** @internal */
export const Drink$inboundSchema: z.ZodType<Drink, z.ZodTypeDef, unknown> = z.object({
    id: z.string(),
    name: Name$inboundSchema,
    price: z.number(),
});

/** @internal */
export type Drink$Outbound = {
    id: string;
    name: string;
    price: number;
};

/** @internal */
export const Drink$outboundSchema: z.ZodType<Drink$Outbound, z.ZodTypeDef, Drink> = z.object({
    id: z.string(),
    name: Name$outboundSchema,
    price: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Drink$ {
    /** @deprecated use `Drink$inboundSchema` instead. */
    export const inboundSchema = Drink$inboundSchema;
    /** @deprecated use `Drink$outboundSchema` instead. */
    export const outboundSchema = Drink$outboundSchema;
    /** @deprecated use `Drink$Outbound` instead. */
    export type Outbound = Drink$Outbound;
}
