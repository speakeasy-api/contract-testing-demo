// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Address struct {
	Street *string `json:"street,omitempty"`
	City   *string `json:"city,omitempty"`
	State  *string `json:"state,omitempty"`
	Zip    *string `json:"zip,omitempty"`
}

func (o *Address) GetStreet() *string {
	if o == nil {
		return nil
	}
	return o.Street
}

func (o *Address) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *Address) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *Address) GetZip() *string {
	if o == nil {
		return nil
	}
	return o.Zip
}

type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
	GenderOther  Gender = "OTHER"
)

func (e Gender) ToPointer() *Gender {
	return &e
}
func (e *Gender) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MALE":
		fallthrough
	case "FEMALE":
		fallthrough
	case "OTHER":
		*e = Gender(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gender: %v", v)
	}
}

type User struct {
	ID      string  `json:"id"`
	Name    string  `json:"name"`
	Address Address `json:"address"`
	Age     int     `json:"age"`
	Gender  Gender  `json:"gender"`
}

func (o *User) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *User) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *User) GetAddress() Address {
	if o == nil {
		return Address{}
	}
	return o.Address
}

func (o *User) GetAge() int {
	if o == nil {
		return 0
	}
	return o.Age
}

func (o *User) GetGender() Gender {
	if o == nil {
		return Gender("")
	}
	return o.Gender
}
