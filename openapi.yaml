openapi: 3.1.0
info:
  title: Test Generation Demo
  version: 0.1.0
servers:
  - url: http://localhost:35123
    description: The default server.
tags:
  - name: users
  - name: drinks
security:
  - apiKey: []
paths:
  /anything/user:
    post:
      operationId: createUser
      x-speakeasy-name-override: create
      # x-speakeasy-test: false
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /anything/user/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: "90d8257b-5a84-4510-97c3-dabf1bfa361b"
    get:
      operationId: getUser
      x-speakeasy-name-override: get
      summary: Get User
      tags:
        - users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      operationId: updateUser
      x-speakeasy-name-override: update
      summary: Update User
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      operationId: deleteUser
      x-speakeasy-name-override: delete
      summary: Delete User
      tags:
        - users
      responses:
        "200":
          description: OK
  /anything/drink/{id}:
    post:
      operationId: createDrink
      # x-speakeasy-test: false
      x-speakeasy-name-override: create
      tags:
        - drinks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          # examples:
          #   createBeer:
          #     value: "3a996362-8f81-4d2a-aced-d3d57474e6e9"
          #   createCoffee:
          #     value: "7afd487f-5fa2-478f-9726-ff80ec8e75f1"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Drink"
            # examples:
            #   createBeer:
            #     value:
            #       {
            #         "id": "3a996362-8f81-4d2a-aced-d3d57474e6e9",
            #         "type": "Beer",
            #         "price": 3.99,
            #       }
            #   createCoffee:
            #     value:
            #       {
            #         "id": "7afd487f-5fa2-478f-9726-ff80ec8e75f1",
            #         "type": "Coffee",
            #         "price": 1.99,
            #       }
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    $ref: "#/components/schemas/Drink"
                required:
                  - json
              # examples:
              #   createBeer:
              #     value:
              #       {
              #         "json":
              #           {
              #             "id": "3a996362-8f81-4d2a-aced-d3d57474e6e9",
              #             "type": "Beer",
              #             "price": 3.99,
              #           },
              #       }
              #   createCoffee:
              #     value:
              #       {
              #         "json":
              #           {
              #             "id": "7afd487f-5fa2-478f-9726-ff80ec8e75f1",
              #             "type": "Coffee",
              #             "price": 1.99,
              #           },
              #       }
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "90d8257b-5a84-4510-97c3-dabf1bfa361b"
        name:
          type: string
          example: "John Doe"
        address:
          type: object
          properties:
            street:
              type: string
              example: "123 Main St"
            city:
              type: string
              example: "San Francisco"
            state:
              type: string
              example: "CA"
            zip:
              type: string
              example: "94107"
        age:
          type: integer
          format: int32
          example: 30
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - OTHER
          example: MALE
      required:
        - id
        - name
        - address
        - age
        - gender
    Drink:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [Beer, Coffee, Wine]
        price:
          type: number
          format: double
      required:
        - id
        - type
        - price
  securitySchemes:
    apiKey:
      type: apiKey
      name: X-API-Key
      in: header
