/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Type = {
  Beer: "Beer",
  Coffee: "Coffee",
  Wine: "Wine",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type Drink = {
  id: string;
  type: Type;
  price: number;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Drink$inboundSchema: z.ZodType<Drink, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    type: Type$inboundSchema,
    price: z.number(),
  });

/** @internal */
export type Drink$Outbound = {
  id: string;
  type: string;
  price: number;
};

/** @internal */
export const Drink$outboundSchema: z.ZodType<
  Drink$Outbound,
  z.ZodTypeDef,
  Drink
> = z.object({
  id: z.string(),
  type: Type$outboundSchema,
  price: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Drink$ {
  /** @deprecated use `Drink$inboundSchema` instead. */
  export const inboundSchema = Drink$inboundSchema;
  /** @deprecated use `Drink$outboundSchema` instead. */
  export const outboundSchema = Drink$outboundSchema;
  /** @deprecated use `Drink$Outbound` instead. */
  export type Outbound = Drink$Outbound;
}

export function drinkToJSON(drink: Drink): string {
  return JSON.stringify(Drink$outboundSchema.parse(drink));
}

export function drinkFromJSON(
  jsonString: string,
): SafeParseResult<Drink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Drink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Drink' from JSON`,
  );
}
