/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateUserRequest = {
  id: string;
  user: components.User;
};

/** @internal */
export const UpdateUserRequest$inboundSchema: z.ZodType<
  UpdateUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  User: components.User$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "User": "user",
  });
});

/** @internal */
export type UpdateUserRequest$Outbound = {
  id: string;
  User: components.User$Outbound;
};

/** @internal */
export const UpdateUserRequest$outboundSchema: z.ZodType<
  UpdateUserRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserRequest
> = z.object({
  id: z.string(),
  user: components.User$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    user: "User",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequest$ {
  /** @deprecated use `UpdateUserRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequest$inboundSchema;
  /** @deprecated use `UpdateUserRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequest$outboundSchema;
  /** @deprecated use `UpdateUserRequest$Outbound` instead. */
  export type Outbound = UpdateUserRequest$Outbound;
}

export function updateUserRequestToJSON(
  updateUserRequest: UpdateUserRequest,
): string {
  return JSON.stringify(
    UpdateUserRequest$outboundSchema.parse(updateUserRequest),
  );
}

export function updateUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequest' from JSON`,
  );
}
