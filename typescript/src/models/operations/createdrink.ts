/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateDrinkRequest = {
  id: string;
  drink: components.Drink;
};

/**
 * Success
 */
export type CreateDrinkResponseBody = {
  json: components.Drink;
};

/** @internal */
export const CreateDrinkRequest$inboundSchema: z.ZodType<
  CreateDrinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  Drink: components.Drink$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Drink": "drink",
  });
});

/** @internal */
export type CreateDrinkRequest$Outbound = {
  id: string;
  Drink: components.Drink$Outbound;
};

/** @internal */
export const CreateDrinkRequest$outboundSchema: z.ZodType<
  CreateDrinkRequest$Outbound,
  z.ZodTypeDef,
  CreateDrinkRequest
> = z.object({
  id: z.string(),
  drink: components.Drink$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    drink: "Drink",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrinkRequest$ {
  /** @deprecated use `CreateDrinkRequest$inboundSchema` instead. */
  export const inboundSchema = CreateDrinkRequest$inboundSchema;
  /** @deprecated use `CreateDrinkRequest$outboundSchema` instead. */
  export const outboundSchema = CreateDrinkRequest$outboundSchema;
  /** @deprecated use `CreateDrinkRequest$Outbound` instead. */
  export type Outbound = CreateDrinkRequest$Outbound;
}

export function createDrinkRequestToJSON(
  createDrinkRequest: CreateDrinkRequest,
): string {
  return JSON.stringify(
    CreateDrinkRequest$outboundSchema.parse(createDrinkRequest),
  );
}

export function createDrinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrinkRequest' from JSON`,
  );
}

/** @internal */
export const CreateDrinkResponseBody$inboundSchema: z.ZodType<
  CreateDrinkResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: components.Drink$inboundSchema,
});

/** @internal */
export type CreateDrinkResponseBody$Outbound = {
  json: components.Drink$Outbound;
};

/** @internal */
export const CreateDrinkResponseBody$outboundSchema: z.ZodType<
  CreateDrinkResponseBody$Outbound,
  z.ZodTypeDef,
  CreateDrinkResponseBody
> = z.object({
  json: components.Drink$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrinkResponseBody$ {
  /** @deprecated use `CreateDrinkResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateDrinkResponseBody$inboundSchema;
  /** @deprecated use `CreateDrinkResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateDrinkResponseBody$outboundSchema;
  /** @deprecated use `CreateDrinkResponseBody$Outbound` instead. */
  export type Outbound = CreateDrinkResponseBody$Outbound;
}

export function createDrinkResponseBodyToJSON(
  createDrinkResponseBody: CreateDrinkResponseBody,
): string {
  return JSON.stringify(
    CreateDrinkResponseBody$outboundSchema.parse(createDrinkResponseBody),
  );
}

export function createDrinkResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrinkResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrinkResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrinkResponseBody' from JSON`,
  );
}
